/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef POSIX_SOCKET_HPP_
#define POSIX_SOCKET_HPP_

#include <unistd.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>

#include "abstract_socket.hpp"

namespace net {

/**
 * @brief Class for Posix socket.
 *
 * This is the class containing the code for Posix platforms.
 */
class PosixSocket: public AbstractSocket {

public:
	/**
	 * @brief Destructor: closes socket and resets the file descriptor.
	 */
	virtual ~PosixSocket(){
		::close(fd_);
		fd_ = -1;
	}
	
	/**
	 * @brief Platform-specific (i.e., Posix) receive
	 *
	 * @param buffer Pointer to the buffer where received bytes must be stored
	 * @param size Number of bytes to receive
	 * @return The number of bytes actually received or -1 in case of error
	 */
	virtual int  sys_receive(void* buffer, size_t size){
		return ::read(fd_, buffer , size);
	}

	/**
	 * @brief Platform-specific (i.e., Posix) send
	 *
	 * @param buffer Pointer to the buffer containing bytes to be sent
	 * @param size Number of bytes sent
	 * @return The number of bytes actually sent or -1 in case of error
	 */
	virtual int  sys_send(const void* buffer, size_t size){
		return ::write(fd_, buffer, size);
	}

protected:

	/**
	 * @brief Constructor. It calls socket().
	 *
	 * It is protected because this class is meant to be allocated only
	 * through the derived classes.
	 * @param domain the communication domain; examples are
	 * AF_INET for IPv4 and AF_LOCAL for local communications.
	 * @param type the communication semantics; examples are
	 * SOCK_STREAM for connection-oriented communications and
	 * SOCK_DGRAM for connection-less communcations
	 * @param protocol specifies a particular protocol to be used with the
	 * socket
	 */
	PosixSocket(int domain, int type, int protocol) {
		fd_ = socket(domain, type, protocol);
		if (fd_ < 0) {
			ERROR("Error when creating socket");
			throw std::runtime_error ("Socket error");
		}
	}


protected:
	/**
	 * @brief Number of the file descriptor.
	 * 
	 * This is the return value of open(), socket() or accept().
	 */
	int fd_;

private:
	/// Disable default constructor:
	PosixSocket();
};

} // net

#endif // POSIX_SOCKET_HPP_

