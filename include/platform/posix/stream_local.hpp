/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef STREAM_LOCAL_HPP_
#define STREAM_LOCAL_HPP_

#include <stdexcept>
#include <sys/types.h>          
#include <sys/socket.h>
#include <arpa/inet.h>
#include <strings.h>
#include <sys/un.h>



#include "posix_socket.hpp"

namespace net {
namespace local {
namespace stream {

/**
 * @brief Socket class for local connection-oriented communications.
 */
class socket: public PosixSocket {

public:
	socket(): PosixSocket(AF_LOCAL, SOCK_STREAM, 0){}
};



/**
 * @brief Server for local connection-oriented communications.
 */
class server: public socket {
public:
	/**
	 * @brief Constructor
	 *
	 * It calls bind() + listen().
	 * @param path Path of the local socket (e.g., "/tmp/mysocket").
	 */
	server(const std::string& path) {
			bind(path);
			listen(100);
		}


	/**
	 * @brief Constructor
	 *
	 * It calls bind() + listen().
	 * @param path Path of the local socket (e.g., "/tmp/mysocket").
	 * @param max_pending_connections Number of maximum allowed pending connections
	 */
	server(const std::string& path, int max_pending_connections) {
			bind(path);
			listen(max_pending_connections);
		}


	/**
	 * @brief Constructor to accept() a local connection-oriented communication.
	 *
	 * It calls accept().
	 * @param srv Existing local connection-oriented socket on which the new connection must be accepted.
	 */
	server(const server& srv){
			accept(srv);
	}

private:

	/**
	 * @brief Method to accept() a connection on the socket.
	 *
	 * This method calls accept().
	 * @param srv Socket on which the new connection must be accepted.
	 * @exception runtime_error in case of error in accept()
	 */
	inline void accept(const server& srv) {
		fd_ = ::accept(srv.fd_, NULL, 0);
		if (fd_ < 0) {
			ERROR("Error in accept()!");
			throw std::runtime_error("Accept error");
		}
	}


	/**
	 * @brief Set the maximum number of pending connections.
	 *
	 * This method allows to specify the number
	 * of maximum allowed pending connections.
	 * @exception runtime_error in case of error in listen()
	 */
	inline void listen(int max_pending_connections) const{
		if (::listen(fd_, max_pending_connections) < 0) {
			::close(fd_);
			ERROR("Error when listening");
			throw std::runtime_error ("Listen error");
		}
	}

	/**
	 * @brief Method to bind() the socket to a specific local socket.
	 *
	 * This method sets the path of the local socket to accept connections.
	 * @param path Path of the local socket (e.g., "/tmp/mysocket").
	 * @exception runtime_error in case of error in bind()
	 */
	inline void bind (const std::string& path)
	{
		struct sockaddr_un serv_addr;
		bzero((char *) &serv_addr, sizeof(serv_addr));
		serv_addr.sun_family = AF_LOCAL;
		strncpy(serv_addr.sun_path, path.c_str(),
		    sizeof(serv_addr.sun_path) - 1);
		if (::bind(fd_, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) != 0){
			::close(fd_);
			ERROR("Error when binding socket");
			throw std::runtime_error ("Bind error");
		}
	}

};


/**
 * @brief Client for local connection-oriented communications.
 */
class client: public socket {
public:
	/**
	 * @brief Constructor.
	 *
	 * This constructor calls connect().
	 * @param path Path of the local socket (e.g., "/tmp/mysocket").
	 * @exception runtime_error in case of error in connect()
	 */
	client (const std::string& path)
	{
		struct sockaddr_un serv_addr;
		bzero((char *) &serv_addr, sizeof(serv_addr));
		serv_addr.sun_family = AF_LOCAL;
		strncpy(serv_addr.sun_path, path.c_str(), sizeof(serv_addr.sun_path) - 1);
		if (::connect(fd_, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) != 0){
			::close(fd_);
			ERROR("Error when creating client socket");
			throw std::runtime_error ("Client socket error");
		}
	}
};

}}} // net::local::stream

#endif // STREAM_LOCAL_HPP_
