/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LOGGER_HPP_
#define LOGGER_HPP_

#include <fstream>
#include <ostream>
#include <string>
#include <sstream>
#include <sys/time.h>
#include <mutex>
#include <chrono>

// Comment this line if you don't need multithread support
#define LOG_MULTITHREAD

/// Log levels:
#define LOG_NOLOG	0 ///< No logging
#define LOG_ERRORS	1 ///< Log only error messages
#define LOG_WARNINGS	2 ///< Log warnings and error messages
#define LOG_ALL		3 ///< Log all

/// Log level for console messages:
#ifndef LOG_LEVEL_CONSOLE
#define LOG_LEVEL_CONSOLE	LOG_WARNINGS
#endif

/// Log level for file:
#ifndef LOG_LEVEL_FILE
#define LOG_LEVEL_FILE		LOG_ALL
#endif

// Uncomment for single-thread log:
#define LOGGER_MULTITHREAD

/**
 * @brief Macro to set the file used for logging.
 *
 * @param Base name of the file used for logging (e.g. "/tmp/myproject")
 *
 * Example of configuration of the Logger: *
 * \code
 * 	LOG_FILE("/tmp/myproject);
 * \endcode
 */
#define LOG_FILE(outputFile) { \
	log::Logger::getInstance().setFile(outputFile); \
	}

/**
 * \brief Macro to print error messages.
 *
 * Example of usage:
 * \code
 * 	ERROR("hello " << "world");
 * \endcode
 */
#if (defined NDEBUG) || (LOG_LEVEL_CONSOLE < LOG_ERRORS && LOG_LEVEL_FILE < LOG_ERRORS)
	#define ERROR(...)
#elif (LOG_LEVEL_CONSOLE < LOG_ERRORS)
	#define ERROR(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[ERROR]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#elif (LOG_LEVEL_FILE < LOG_ERRORS)
	#define ERROR(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[ERROR]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#else
	#define ERROR(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[ERROR]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#endif


/**
 * \brief Macro to print warning messages.
 *
 * Example of usage:
 * \code
 * 	WARNING("hello " << "world");
 * \endcode
 */
#if (defined NDEBUG) || (LOG_LEVEL_CONSOLE < LOG_WARNINGS && LOG_LEVEL_FILE < LOG_WARNINGS)
	#define WARNING(...)
#elif (LOG_LEVEL_CONSOLE < LOG_WARNINGS)
	#define WARNING(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[WARNING]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#elif (LOG_LEVEL_FILE < LOG_WARNINGS)
	#define WARNING(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[WARNING]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#else
	#define WARNING(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[WARNING]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#endif



/**
 * \brief Macro to print debug messages.
 *
 * Example of usage:
 * \code
 * 	DEBUG("hello " << "world");
 * \endcode
 */
#if (defined NDEBUG) || (LOG_LEVEL_CONSOLE < LOG_ALL && LOG_LEVEL_FILE < LOG_ALL)
	#define DEBUG(...)
#elif (LOG_LEVEL_CONSOLE < LOG_ALL)
	#define DEBUG(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[DEBUG]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#elif (LOG_LEVEL_FILE < LOG_ALL)
	#define DEBUG(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[DEBUG]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#else
	#define DEBUG(msg) { \
		std::ostringstream __debug_stream__; \
		__debug_stream__ << "[DEBUG]\t"; \
		__debug_stream__ << msg; \
		log::Logger::getInstance().printOnConsole(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		log::Logger::getInstance().printOnFile(__FILE__, __LINE__, \
				__debug_stream__.str()); \
		}
#endif


namespace log {



/**
 * @brief Simple logger to log messages on file and console.
 *
 * This is the implementation of a simple logger in C++. It is implemented 
 * as a Singleton, so it can be easily called through the DEBUG, WARNING
 * and ERROR macros.
 * It is Pthread-safe.
 * It allows to log on both file and screen.
 *
 * Example of configuration of the Logger: *
 * \code
 * 	LOG_FILE("/tmp/myproject);
 * \endcode
 *
 * Example of usage of the Logger:
 * \code
 * 	DEBUG("hello " << "world");
 * \endcode
 */
class Logger
{
public:
	static Logger& getInstance();

	void printOnConsole(	const std::string&	sourceFile,
				const int 		codeLine,
				const std::string& 	message);
	void printOnFile(	const std::string&	sourceFile,
				const int 		codeLine,
				const std::string& 	message);

	void setFile (const std::string&	outputFile);

private:
	Logger();
	~Logger();

#ifdef LOGGER_MULTITHREAD
	/**
	 * @brief Lock for mutual exclusion between different threads
	 */
	static std::mutex lock_;
#endif
	
	/**
	 * @brief Pointer to the unique Logger (i.e., Singleton)
	 */
	static Logger* m_;

	/**
	 * @brief Initial part of the name of the file used for Logging.
	 *
	 * Date and time are automatically appended.
	 */
	std::string logFile_;

	/**
	 * @brief Stream used when logging on a file
	 */
	std::ofstream out_;

	/**
	 * @brief Initial time (used to print relative times)
	 */
	std::chrono::time_point<std::chrono::system_clock> initialTime_;

	/**
	 * @brief Method to lock in case of multithreading
	 */
	inline static void lock();

	/**
	 * @brief Method to unlock in case of multithreading
	 */
	inline static void unlock();
};

} // log

#endif // LOGGER_HPP_
